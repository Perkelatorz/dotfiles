#!/bin/bash
set -e

PKG_DIR="$HOME/.config/yadm/packages"
echo "üöÄ Starting Arch Linux Setup..."

# Track installation stats
core_pacman_installed=0
core_pacman_skipped=0
core_aur_installed=0
core_aur_skipped=0
extra_pacman_installed=0
extra_pacman_skipped=0
extra_aur_installed=0
extra_aur_skipped=0

# --- PHASE 1: Install Core Dependencies (Non-Interactive) ---

echo "üîÑ Installing core system tools..."

# Install core pacman packages with tracking
if [[ -f "$PKG_DIR/core.pkgs" ]]; then
    mapfile -t core_packages < <(grep -v '^#' "$PKG_DIR/core.pkgs" | grep -v '^$')

    if [ ${#core_packages[@]} -gt 0 ]; then
        echo "üì¶ Processing ${#core_packages[@]} core pacman packages..."
        sudo pacman -Sy --noconfirm
        for pkg in "${core_packages[@]}"; do
            if pacman -Qi "$pkg" &>/dev/null; then
                echo "   ‚úì $pkg (already installed)"
                core_pacman_skipped=$((core_pacman_skipped+1))
            else
                echo "   ‚Üí Installing $pkg..."
                if sudo pacman -S --needed --noconfirm "$pkg"; then
                    core_pacman_installed=$((core_pacman_installed+1))
                else
                    echo "   ‚ö†Ô∏è  Failed to install $pkg"
                fi
            fi
        done
    fi
else
    echo "‚ö†Ô∏è  $PKG_DIR/core.pkgs not found. Skipping core pacman setup."
fi

# Install core AUR packages with tracking
if [[ -f "$PKG_DIR/core.aur" ]]; then
    mapfile -t core_aur_packages < <(grep -v '^#' "$PKG_DIR/core.aur" | grep -v '^$')

    if [ ${#core_aur_packages[@]} -gt 0 ]; then
        echo "üîß Processing ${#core_aur_packages[@]} core AUR packages..."
        if ! command -v paru &>/dev/null; then
            echo "üîß Installing 'paru' helper..."
            git clone https://aur.archlinux.org/paru.git /tmp/paru
            (cd /tmp/paru && makepkg -si --noconfirm)
            rm -rf /tmp/paru
        fi
        for pkg in "${core_aur_packages[@]}"; do
            if paru -Qi "$pkg" &>/dev/null; then
                echo "   ‚úì $pkg (already installed)"
                core_aur_skipped=$((core_aur_skipped+1))
            else
                echo "   ‚Üí Installing $pkg from AUR..."
                set +e
                if paru -S --needed --noconfirm "$pkg"; then
                    core_aur_installed=$((core_aur_installed+1))
                else
                    echo "   ‚ö†Ô∏è  Failed to install $pkg"
                fi
                set -e
            fi
        done
    fi
else
    echo "‚ö†Ô∏è  $PKG_DIR/core.aur not found. Skipping core AUR setup."
fi

echo "‚úÖ Core tools done."
echo

# --- PHASE 2: Interactive Package Selection ---

final_packages=()
final_aur=()

# Find all .pkgs and .aur files EXCEPT core.*, then let user pick
selections=$(find "$PKG_DIR" \( -name "*.pkgs" -o -name "*.aur" \) \
    ! -name 'core.pkgs' ! -name 'core.aur' \
    -printf "%f\n" | \
    fzf -m --prompt="Select package lists (TAB to mark, ENTER to confirm) > " \
        --header="Core packages already installed. Choose the rest." \
        --preview="echo 'Contents of {}:'; echo '---'; cat $PKG_DIR/{}")

if [[ -z "$selections" ]]; then
    echo "No extra packages selected. Setup complete!"
    echo
    echo "üìã Installation Summary:"
    echo "   ‚Ä¢ Core pacman: $core_pacman_installed installed, $core_pacman_skipped skipped"
    echo "   ‚Ä¢ Core AUR: $core_aur_installed installed, $core_aur_skipped skipped"
    echo "   ‚Ä¢ Extra pacman: 0 installed, 0 skipped"
    echo "   ‚Ä¢ Extra AUR: 0 installed, 0 skipped"
    exit 0
fi

echo "‚úÖ Selections confirmed. Building remaining package lists..."

while IFS= read -r selection; do
    file="$PKG_DIR/$selection"
    case "$selection" in
        *.pkgs)
            echo " -> Loading pacman packages from $file"
            mapfile -t temp_packages < <(grep -v '^#' "$file" | grep -v '^$')
            final_packages+=("${temp_packages[@]}")
            ;;
        *.aur)
            echo " -> Loading AUR packages from $file"
            mapfile -t temp_aur < <(grep -v '^#' "$file" | grep -v '^$')
            final_aur+=("${temp_aur[@]}")
            ;;
    esac
done <<< "$selections"

# --- PHASE 3: Install extras ---

# Ensure paru is ready if we'll need it
if [ ${#final_aur[@]} -gt 0 ]; then
    if ! command -v paru &>/dev/null; then
        echo "üîß Installing 'paru' helper..."
        git clone https://aur.archlinux.org/paru.git /tmp/paru
        (cd /tmp/paru && makepkg -si --noconfirm)
        rm -rf /tmp/paru
    fi
fi

# Install extra pacman packages with tracking
if [ ${#final_packages[@]} -gt 0 ]; then
    echo "üì¶ Processing ${#final_packages[@]} extra pacman packages..."
    for pkg in "${final_packages[@]}"; do
        if pacman -Qi "$pkg" &>/dev/null; then
            echo "   ‚úì $pkg (already installed)"
            extra_pacman_skipped=$((extra_pacman_skipped+1))
        else
            echo "   ‚Üí Installing $pkg..."
            if sudo pacman -S --needed --noconfirm "$pkg"; then
                extra_pacman_installed=$((extra_pacman_installed+1))
            else
                echo "   ‚ö†Ô∏è  Failed to install $pkg"
            fi
        fi
    done
fi

# Install extra AUR packages with tracking
if [ ${#final_aur[@]} -gt 0 ]; then
    echo "üèóÔ∏è  Processing ${#final_aur[@]} extra AUR packages..."
    for pkg in "${final_aur[@]}"; do
        if paru -Qi "$pkg" &>/dev/null; then
            echo "   ‚úì $pkg (already installed)"
            extra_aur_skipped=$((extra_aur_skipped+1))
        else
            echo "   ‚Üí Installing $pkg from AUR..."
            set +e
            if paru -S --needed --noconfirm "$pkg"; then
                extra_aur_installed=$((extra_aur_installed+1))
            else
                echo "   ‚ö†Ô∏è  Failed to install $pkg"
            fi
            set -e
        fi
    done
fi

# --- SUMMARY ---

echo
echo "‚ú® Setup finished successfully!"
echo
echo "üìã Installation Summary:"
echo "   ‚Ä¢ Core pacman: $core_pacman_installed installed, $core_pacman_skipped skipped"
echo "   ‚Ä¢ Core AUR: $core_aur_installed installed, $core_aur_skipped skipped"
echo "   ‚Ä¢ Extra pacman: $extra_pacman_installed installed, $extra_pacman_skipped skipped"
echo "   ‚Ä¢ Extra AUR: $extra_aur_installed installed, $extra_aur_skipped skipped"
echo
total_installed=$((core_pacman_installed + core_aur_installed + extra_pacman_installed + extra_aur_installed))
total_skipped=$((core_pacman_skipped + core_aur_skipped + extra_pacman_skipped + extra_aur_skipped))
echo "üéØ Total: $total_installed installed, $total_skipped skipped"


# --- Setup Hyprland ---
#
# This might need to be rewrote to handle a list of plugins

hyperland_setup() {
    # Function to handle errors with a cross ‚ùå
    handle_error() {
        echo -e "ÔÅó  Error: $1" >&2   # Nerd Font 'nf-fa-times_circle'
        exit 1
    }
    
    # Check if hyprpm is available
    if ! command -v hyprpm &> /dev/null; then
        handle_error "hyprpm command not found ÔÇÖ  (Please ensure Hyprland is properly installed)"
    fi
    
    # Update Hyprland repos
    echo -e "ÔÄ°  Updating Hyprland repos..."
    if ! hyprpm update; then
        handle_error "Failed to update Hyprland repos"
    fi
    echo -e "ÔÅò  Hyprland repos are now updated"
    
    # Add the plugin repository
    echo -e "ÔÉæ  Adding split-monitor-workspaces plugin repository..."
    if ! hyprpm add https://github.com/Duckonaut/split-monitor-workspaces; then
        handle_error "Failed to add split-monitor-workspaces plugin repository"
    fi
    echo -e "ÔÅò  Plugin repository added successfully"
    
    # Enable the plugin
    echo -e "‚ö° Enabling split-monitor-workspaces plugin..."
    if ! hyprpm enable split-monitor-workspaces; then
        handle_error "Failed to enable split-monitor-workspaces plugin"
    fi
    echo -e "ÔÅò  Plugin enabled successfully"
    
    # Reload the plugins
    echo -e "ÔÄû  Reloading plugins..."
    if ! hyprpm reload; then
        handle_error "Failed to reload plugins"
    fi
    echo -e "ÔÅò  Plugins reloaded successfully"
    
    echo -e "üöÄ  All operations completed successfully!"
}

# Prompt the user
read -p "Do you want to install hyperland plugins? (y/N): " choice

# Convert input to lowercase for easier comparison
choice=${choice,,}

# Check the user's input using an if statement
if [[ "$choice" == "y" || "$choice" == "yes" ]]; then
    echo "User chose to proceed."
    hyperland_setup #Call the function that does "something"
else
    echo "User chose not to proceed. Hyprland Plugins."
fi
