#!/bin/bash
set -euo pipefail

PKG_DIR="$HOME/.config/yadm/packages"
echo "üöÄ Starting Arch Linux Setup..."

# Track installation stats
core_pacman_installed=0
core_pacman_skipped=0
core_aur_installed=0
core_aur_skipped=0
extra_pacman_installed=0
extra_pacman_skipped=0
extra_aur_installed=0
extra_aur_skipped=0

ensure_paru() {
    if ! command -v paru &>/dev/null; then
        echo "üîß Installing 'paru' helper..."
        tmpdir="$(mktemp -d)"
        git clone https://aur.archlinux.org/paru.git "$tmpdir/paru"
        (cd "$tmpdir/paru" && makepkg -si --noconfirm)
        rm -rf "$tmpdir"
    fi
}

read_pkg_file() {
    # Read non-empty, non-comment lines from a file into stdout
    grep -v '^\s*#' "$1" | grep -v '^\s*$' || true
}

dedupe_array() {
    # Usage: dedupe_array "${arr[@]}"
    awk '!seen[$0]++'
}

filter_installed_pacman() {
    # stdin: list of pacman package names
    while read -r pkg; do
        if pacman -Qi "$pkg" &>/dev/null; then
            echo "installed $pkg"
        else
            echo "missing $pkg"
        fi
    done
}

filter_installed_paru() {
    # stdin: list of AUR package names
    while read -r pkg; do
        if paru -Qi "$pkg" &>/dev/null; then
            echo "installed $pkg"
        else
            echo "missing $pkg"
        fi
    done
}

install_pacman_batch() {
    # args: package list
    local -a pkgs=("$@")
    if [ ${#pkgs[@]} -eq 0 ]; then
        return 0
    fi
    echo "   ‚Üí Installing ${#pkgs[@]} pacman packages in a batch..."
    if sudo pacman -S --needed --noconfirm "${pkgs[@]}"; then
        return 0
    else
        echo "   ‚ö†Ô∏è  Batch pacman install failed. Attempting per-package fallback..."
        local installed=0
        for p in "${pkgs[@]}"; do
            if sudo pacman -S --needed --noconfirm "$p"; then
                installed=$((installed+1))
            else
                echo "   ‚ö†Ô∏è  Failed to install $p"
            fi
        done
        # If we got here, return success anyway; individual failures already logged.
        return 0
    fi
}

install_paru_batch() {
    # args: package list
    local -a pkgs=("$@")
    if [ ${#pkgs[@]} -eq 0 ]; then
        return 0
    fi
    echo "   ‚Üí Installing ${#pkgs[@]} AUR packages in a batch..."
    set +e
    paru -S --needed --noconfirm "${pkgs[@]}"
    local rc=$?
    set -e
    if [ $rc -ne 0 ]; then
        echo "   ‚ö†Ô∏è  Batch AUR install failed. Attempting per-package fallback..."
        for p in "${pkgs[@]}"; do
            set +e
            paru -S --needed --noconfirm "$p"
            if [ $? -ne 0 ]; then
                echo "   ‚ö†Ô∏è  Failed to install $p"
            fi
            set -e
        done
    fi
    return 0
}

# --- PHASE 1: Install Core Dependencies (Non-Interactive) ---

echo "üîÑ Installing core system tools..."

# Core pacman (batched)
if [[ -f "$PKG_DIR/core.pkgs" ]]; then
    mapfile -t core_packages < <(read_pkg_file "$PKG_DIR/core.pkgs" | dedupe_array)
    if [ ${#core_packages[@]} -gt 0 ]; then
        echo "üì¶ Processing ${#core_packages[@]} core pacman packages..."
        sudo pacman -Sy --noconfirm

        # Split into installed vs missing
        installed_list=()
        missing_list=()
        while read -r status pkg; do
            if [[ "$status" == "installed" ]]; then
                installed_list+=("$pkg")
            else
                missing_list+=("$pkg")
            fi
        done < <(
            for p in "${core_packages[@]}"; do echo "$p"; done | filter_installed_pacman
        )

        for p in "${installed_list[@]}"; do
            echo "   ‚úì $p (already installed)"
        done
        core_pacman_skipped=$((core_pacman_skipped + ${#installed_list[@]}))

        if [ ${#missing_list[@]} -gt 0 ]; then
            install_pacman_batch "${missing_list[@]}"
            core_pacman_installed=$((core_pacman_installed + ${#missing_list[@]}))
        fi
    fi
else
    echo "‚ö†Ô∏è  $PKG_DIR/core.pkgs not found. Skipping core pacman setup."
fi

# Core AUR (batched)
if [[ -f "$PKG_DIR/core.aur" ]]; then
    mapfile -t core_aur_packages < <(read_pkg_file "$PKG_DIR/core.aur" | dedupe_array)
    if [ ${#core_aur_packages[@]} -gt 0 ]; then
        echo "üîß Processing ${#core_aur_packages[@]} core AUR packages..."
        ensure_paru

        installed_list=()
        missing_list=()
        while read -r status pkg; do
            if [[ "$status" == "installed" ]]; then
                installed_list+=("$pkg")
            else
                missing_list+=("$pkg")
            fi
        done < <(
            for p in "${core_aur_packages[@]}"; do echo "$p"; done | filter_installed_paru
        )

        for p in "${installed_list[@]}"; do
            echo "   ‚úì $p (already installed)"
        done
        core_aur_skipped=$((core_aur_skipped + ${#installed_list[@]}))

        if [ ${#missing_list[@]} -gt 0 ]; then
            install_paru_batch "${missing_list[@]}"
            core_aur_installed=$((core_aur_installed + ${#missing_list[@]}))
        fi
    fi
else
    echo "‚ö†Ô∏è  $PKG_DIR/core.aur not found. Skipping core AUR setup."
fi

echo "‚úÖ Core tools done."
echo

# --- PHASE 2: Interactive Package Selection ---

final_packages=()
final_aur=()

# Find all .pkgs and .aur files EXCEPT core.*, then let user pick
if command -v fzf >/dev/null 2>&1; then
    selections=$(find "$PKG_DIR" \( -name "*.pkgs" -o -name "*.aur" \) \
        ! -name 'core.pkgs' ! -name 'core.aur' \
        -printf "%f\n" | \
        fzf -m --prompt="Select package lists (TAB to mark, ENTER to confirm) > " \
            --header="Core packages already installed. Choose the rest." \
            --preview="echo 'Contents of {}:'; echo '---'; cat $PKG_DIR/{}" || true)
else
    echo "‚ö†Ô∏è fzf not found. Selecting all non-core lists."
    selections=$(find "$PKG_DIR" \( -name "*.pkgs" -o -name "*.aur" \) ! -name 'core.pkgs' ! -name 'core.aur' -printf "%f\n")
fi

if [[ -z "${selections:-}" ]]; then
    echo "No extra packages selected. Setup complete!"
    echo
    echo "üìã Installation Summary:"
    echo "   ‚Ä¢ Core pacman: $core_pacman_installed installed, $core_pacman_skipped skipped"
    echo "   ‚Ä¢ Core AUR: $core_aur_installed installed, $core_aur_skipped skipped"
    echo "   ‚Ä¢ Extra pacman: 0 installed, 0 skipped"
    echo "   ‚Ä¢ Extra AUR: 0 installed, 0 skipped"
    exit 0
fi

echo "‚úÖ Selections confirmed. Building remaining package lists..."

while IFS= read -r selection; do
    file="$PKG_DIR/$selection"
    case "$selection" in
        *.pkgs)
            echo " -> Loading pacman packages from $file"
            mapfile -t temp_packages < <(read_pkg_file "$file")
            final_packages+=("${temp_packages[@]}")
            ;;
        *.aur)
            echo " -> Loading AUR packages from $file"
            mapfile -t temp_aur < <(read_pkg_file "$file")
            final_aur+=("${temp_aur[@]}")
            ;;
    esac
done <<< "$selections"

# Dedupe extras
mapfile -t final_packages < <(printf "%s\n" "${final_packages[@]}" | dedupe_array)
mapfile -t final_aur < <(printf "%s\n" "${final_aur[@]}" | dedupe_array)

# --- PHASE 3: Install extras (batched) ---

# Ensure paru if needed
if [ ${#final_aur[@]} -gt 0 ]; then
    ensure_paru
fi

# Extra pacman (batched)
if [ ${#final_packages[@]} -gt 0 ]; then
    echo "üì¶ Processing ${#final_packages[@]} extra pacman packages..."
    installed_list=()
    missing_list=()
    while read -r status pkg; do
        if [[ "$status" == "installed" ]]; then
            installed_list+=("$pkg")
        else
            missing_list+=("$pkg")
        fi
    done < <(
        for p in "${final_packages[@]}"; do echo "$p"; done | filter_installed_pacman
    )

    for p in "${installed_list[@]}"; do
        echo "   ‚úì $p (already installed)"
    done
    extra_pacman_skipped=$((extra_pacman_skipped + ${#installed_list[@]}))

    if [ ${#missing_list[@]} -gt 0 ]; then
        install_pacman_batch "${missing_list[@]}"
        extra_pacman_installed=$((extra_pacman_installed + ${#missing_list[@]}))
    fi
fi

# Extra AUR (batched)
if [ ${#final_aur[@]} -gt 0 ]; then
    echo "üèóÔ∏è  Processing ${#final_aur[@]} extra AUR packages..."
    installed_list=()
    missing_list=()
    while read -r status pkg; do
        if [[ "$status" == "installed" ]]; then
            installed_list+=("$pkg")
        else
            missing_list+=("$pkg")
        fi
    done < <(
        for p in "${final_aur[@]}"; do echo "$p"; done | filter_installed_paru
    )

    for p in "${installed_list[@]}"; do
        echo "   ‚úì $p (already installed)"
    done
    extra_aur_skipped=$((extra_aur_skipped + ${#installed_list[@]}))

    if [ ${#missing_list[@]} -gt 0 ]; then
        install_paru_batch "${missing_list[@]}"
        extra_aur_installed=$((extra_aur_installed + ${#missing_list[@]}))
    fi
fi

# --- SUMMARY ---

echo
echo "‚ú® Setup finished successfully!"
echo
echo "üìã Installation Summary:"
echo "   ‚Ä¢ Core pacman: $core_pacman_installed installed, $core_pacman_skipped skipped"
echo "   ‚Ä¢ Core AUR: $core_aur_installed installed, $core_aur_skipped skipped"
echo "   ‚Ä¢ Extra pacman: $extra_pacman_installed installed, $extra_pacman_skipped skipped"
echo "   ‚Ä¢ Extra AUR: $extra_aur_installed installed, $extra_aur_skipped skipped"
echo
total_installed=$((core_pacman_installed + core_aur_installed + extra_pacman_installed + extra_aur_installed))
total_skipped=$((core_pacman_skipped + core_aur_skipped + extra_pacman_skipped + extra_aur_skipped))
echo "üéØ Total: $total_installed installed, $total_skipped skipped"

# --- Setup Hyprland ---
#
# This might need to be rewrote to handle a list of plugins

hyperland_setup() {
    # Function to handle errors with a cross ‚ùå
    handle_error() {
        echo -e "ÔÅó  Error: $1" >&2   # Nerd Font 'nf-fa-times_circle'
        exit 1
    }
    
    # Check if hyprpm is available
    if ! command -v hyprpm &> /dev/null; then
        handle_error "hyprpm command not found ÔÇÖ  (Please ensure Hyprland is properly installed)"
    fi
    
    # Update Hyprland repos
    echo -e "ÔÄ°  Updating Hyprland repos..."
    if ! hyprpm update; then
        handle_error "Failed to update Hyprland repos"
    fi
    echo -e "ÔÅò  Hyprland repos are now updated"
    
    # Add the plugin repository
    echo -e "ÔÉæ  Adding split-monitor-workspaces plugin repository..."
    if ! hyprpm add https://github.com/Duckonaut/split-monitor-workspaces; then
        handle_error "Failed to add split-monitor-workspaces plugin repository"
    fi
    echo -e "ÔÅò  Plugin repository added successfully"
    
    # Enable the plugin
    echo -e "‚ö° Enabling split-monitor-workspaces plugin..."
    if ! hyprpm enable split-monitor-workspaces; then
        handle_error "Failed to enable split-monitor-workspaces plugin"
    fi
    echo -e "ÔÅò  Plugin enabled successfully"
    
    # Reload the plugins
    echo -e "ÔÄû  Reloading plugins..."
    if ! hyprpm reload; then
        handle_error "Failed to reload plugins"
    fi
    echo -e "ÔÅò  Plugins reloaded successfully"
    
    echo -e "üöÄ  All operations completed successfully!"
}

# Prompt the user
read -p "Do you want to install hyperland plugins? (y/N): " choice
choice=${choice,,}

if [[ "$choice" == "y" || "$choice" == "yes" ]]; then
    echo "User chose to proceed."
    hyperland_setup
else
    echo "User chose not to proceed. Hyprland Plugins."
fi
